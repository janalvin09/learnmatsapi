// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  results Result[]

  @@map("users")
}

model Classlevel {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  categories Category[]
  materials  Material[]
  questions  Question[]
  results    Result[]

  @@map("classlevels")
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  classlevel_id Int
  classlevel    Classlevel @relation(fields: [classlevel_id], references: [id])

  materials Material[]
}

model Material {
  id                         Int      @id @default(autoincrement())
  name                       String
  material_icon              String
  material_description_title String
  material_description       String
  material_description_image String
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @default(now())

  classlevel_id Int
  category_id   Int
  classlevel    Classlevel @relation(fields: [classlevel_id], references: [id])
  category      Category   @relation(fields: [category_id], references: [id])

  questions Question[]
  results   Result[]

  @@map("materials")
}

model Question {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  material_id   Int
  classlevel_id Int
  material      Material   @relation(fields: [material_id], references: [id])
  classlevel    Classlevel @relation(fields: [classlevel_id], references: [id])

  answers Answer[]

  @@map("questions")
}

model Answer {
  id         Int      @id @default(autoincrement())
  name       String
  is_correct Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  question_id Int
  question    Question @relation(fields: [question_id], references: [id])

  @@map("answers")
}

model Result {
  id                     Int      @id @default(autoincrement())
  score_by_percentage    Decimal
  total_correct_answer   Int
  total_incorrect_answer Int
  number_of_question     Int
  createdAt              DateTime @default(now())
  updatedAt              DateTime @default(now())

  user_id       Int
  material_id   Int
  classlevel_id Int
  user          User       @relation(fields: [user_id], references: [id])
  material      Material   @relation(fields: [material_id], references: [id])
  classlevel    Classlevel @relation(fields: [classlevel_id], references: [id])

  @@map("results")
}

model Language {
  id        Int      @id @default(autoincrement())
  lang_code String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  translations Tranlation[]
}

model Tranlation {
  id          Int      @id @default(autoincrement())
  word        String
  translation String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  language_id Int
  language    Language @relation(fields: [language_id], references: [id])
}
